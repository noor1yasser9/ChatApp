package com.example.nurbk.ps.chatapp.viewModelimport android.app.Applicationimport android.util.Logimport androidx.lifecycle.AndroidViewModelimport androidx.lifecycle.MutableLiveDataimport com.example.nurbk.ps.chatapp.model.Userimport com.example.nurbk.ps.chatapp.repository.AuthActivityRepositoryimport com.example.nurbk.ps.chatapp.unit.Constantsimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.iid.FirebaseInstanceIdimport java.util.*class AuthActivityViewModel(application: Application) : AndroidViewModel(application) {    private val TAG = "AuthActivityViewModel"    private val repository = AuthActivityRepository()    val isSignUp = MutableLiveData<Boolean>()    val isSignInLiveData = MutableLiveData<Boolean>()    private fun insertUser(user: User) = repository.insetUser(user)        .addOnCompleteListener {            if (it.isSuccessful) {                isSignUp.value = true            } else {                Log.e(TAG, "insertUser ->addOnCompleteListener-> Error ${it.exception!!.message}")                isSignUp.value = false            }        }    fun createNewAccount(user: User) =        Constants.mAuth.createUserWithEmailAndPassword(user.email!!, user.password!!)            .addOnCompleteListener {                if (it.isSuccessful) {                    sendEmailVerification(user)                } else {                    Log.e(                        TAG,                        "createNewAccount ->addOnCompleteListener-> Error ${it.exception!!.message}"                    )                    isSignUp.value = false                }            }    fun signIn(email: String, password: String) =        Constants.mAuth.signInWithEmailAndPassword(email, password).addOnCompleteListener {            if (it.isSuccessful) {                FirebaseInstanceId.getInstance().instanceId.addOnCompleteListener { token ->                    if (token.isSuccessful) {                        Constants.nameCollection(Constants.COLLECTION_USERS)                            .document(FirebaseAuth.getInstance().uid.toString())                            .update(mapOf("token" to token.result!!.token, "statusUser" to 1))                            .also {                                isSignInLiveData.value = true                            }                    } else {                        Log.e(TAG, "signIn->FirebaseInstanceId->${token.exception!!.message}")                        isSignInLiveData.value = false                    }                }            } else {                isSignInLiveData.value = false                Log.e(TAG, "signIn->signInWithEmailAndPassword->${it.exception!!.message}")            }        }    private fun sendEmailVerification(user: User) {        val userAuth = Constants.mAuth.currentUser        userAuth!!.sendEmailVerification().addOnCompleteListener {            if (it.isSuccessful) {                insertUser(                    User(                        user.name,                        user.email,                        user.password,                        user.profileImage,                        Constants.mAuth.uid.toString(),                        ""                        , "No Message"                        , Date(0),                        0                         )                )            }        }    }}