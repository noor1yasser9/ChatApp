package com.example.nurbk.ps.chatapp.repositoryimport com.example.nurbk.ps.chatapp.model.TextMessageimport com.example.nurbk.ps.chatapp.model.Userimport com.example.nurbk.ps.chatapp.unit.Constantsimport com.google.firebase.firestore.Queryclass MainActivityRepository {    fun getProfileData(getDataUser: (User) -> Unit) =        Constants.nameCollection(Constants.COLLECTION_USERS)            .document(Constants.mAuth.currentUser!!.uid)            .get().addOnSuccessListener {                getDataUser(it.toObject(User::class.java)!!)            }    fun getAllUsers() =        Constants.nameCollection(Constants.COLLECTION_USERS)    fun sentMessage(        channelId: String,        message: TextMessage,        collectionName: String,        onComplete: () -> Unit    ) {        Constants.nameCollection(collectionName)            .document(channelId)            .collection(Constants.COLLECTION_CHAT_MESSAGE).add(message).addOnCompleteListener {                onComplete()            }    }    private val newChatChannel = Constants        .nameCollection(Constants.COLLECTION_USERS).document()    fun createChatChannel(        uid: String,        onComplete: (channelId: String) -> Unit    ) {        Constants.nameCollection(Constants.COLLECTION_USERS)            .document(Constants.mAuth.currentUser!!.uid)            .collection(Constants.COLLECTION_CHAT_CHANNEL)            .document(uid)            .get()            .addOnSuccessListener {                if (it.exists()) {                    onComplete(it["channelId"] as String)                } else {                    sendChatUid(uid, Constants.mAuth.currentUser!!.uid)                        .set(mapOf("channelId" to newChatChannel.id))                    sendChatUid(Constants.mAuth.currentUser!!.uid, uid)                        .set(mapOf("channelId" to newChatChannel.id))                    onComplete(newChatChannel.id)                }            }    }    private fun sendChatUid(        senderName: String,        recipientName: String    ) =        Constants            .nameCollection(Constants.COLLECTION_USERS)            .document(senderName)            .collection(Constants.COLLECTION_CHAT_CHANNEL)            .document(recipientName)    fun getMessage(channelId: String, collectionName: String) =        Constants.nameCollection(collectionName)            .document(channelId)            .collection(Constants.COLLECTION_CHAT_MESSAGE)            .orderBy("date", Query.Direction.DESCENDING)}